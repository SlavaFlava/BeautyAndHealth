"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var o=e[r];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,_toPropertyKey(o.key),o)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&_setPrototypeOf(t,e)}function _createSuper(r){var o=_isNativeReflectConstruct();return function(){var t,e=_getPrototypeOf(r);return _possibleConstructorReturn(this,o?(t=_getPrototypeOf(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments))}}function _possibleConstructorReturn(t,e){if(e&&("object"===_typeof(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _wrapNativeSuper(t){var r="function"==typeof Map?new Map:void 0;return(_wrapNativeSuper=function(t){if(null===t||!_isNativeFunction(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,e)}function e(){return _construct(t,arguments,_getPrototypeOf(this).constructor)}return e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(e,t)})(t)}function _construct(t,e,r){return(_construct=_isNativeReflectConstruct()?Reflect.construct.bind():function(t,e,r){var o=[null];o.push.apply(o,e);e=new(Function.bind.apply(t,o));return r&&_setPrototypeOf(e,r.prototype),e}).apply(null,arguments)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return!1}}function _isNativeFunction(t){return-1!==Function.toString.call(t).indexOf("[native code]")}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _defineProperty(t,e,r){return(e=_toPropertyKey(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"===_typeof(t)?t:String(t)}function _toPrimitive(t,e){if("object"!==_typeof(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!==_typeof(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}!function o(n,s,i){function c(e,t){if(!s[e]){if(!n[e]){var r="function"==typeof require&&require;if(!t&&r)return r(e,!0);if(l)return l(e,!0);throw(t=new Error("Cannot find module '"+e+"'")).code="MODULE_NOT_FOUND",t}r=s[e]={exports:{}},n[e][0].call(r.exports,function(t){return c(n[e][1][t]||t)},r,r.exports,o,n,s,i)}return s[e].exports}for(var l="function"==typeof require&&require,t=0;t<i.length;t++)c(i[t]);return c}({1:[function(t,e,r){customElements.get("s-steps-scroll")||customElements.define("s-steps-scroll",function(){_inherits(r,_wrapNativeSuper(HTMLElement));var e=_createSuper(r);function r(){var t;return _classCallCheck(this,r),_defineProperty(_assertThisInitialized(t=e.call(this)),"activeImages",[]),_defineProperty(_assertThisInitialized(t),"imagesTranslate",0),_defineProperty(_assertThisInitialized(t),"sectionHeight",t.querySelector(".s-steps-scroll__row").offsetHeight),_defineProperty(_assertThisInitialized(t),"srollPosImage",0),_defineProperty(_assertThisInitialized(t),"sectionTopValue",0),_defineProperty(_assertThisInitialized(t),"sectionBottomValue",0),t}return _createClass(r,[{key:"connectedCallback",value:function(){this.scrollEvent(),this.querySelector(".s-steps-scroll").style.height=this.sectionHeight+"px",this.querySelector(".s-steps-scroll__row").style.height="700px"}},{key:"toggleFixedSection",value:function(){this.querySelector(".s-steps-scroll__row").getBoundingClientRect().y<100&&0==this.sectionTopValue?(this.querySelector(".s-steps-scroll__row").classList.add("s-steps-scroll__row--active"),this.querySelector(".s-steps-scroll__row").style.transform="translateY(0px)",this.sectionTopValue=window.scrollY):window.scrollY<this.sectionTopValue?(this.querySelector(".s-steps-scroll__row").classList.remove("s-steps-scroll__row--active"),this.sectionTopValue=0):window.scrollY>this.sectionTopValue+this.sectionHeight-500?(this.querySelector(".s-steps-scroll__row").classList.remove("s-steps-scroll__row--active"),this.querySelector(".s-steps-scroll__row").style.transform="translateY("+(this.sectionHeight-600)+"px)",this.sectionBottomValue=window.scrollY):window.scrollY<this.sectionTopValue+this.sectionHeight-500&&0<this.sectionBottomValue&&(this.sectionBottomValue=0,this.querySelector(".s-steps-scroll__row").classList.add("s-steps-scroll__row--active"),this.querySelector(".s-steps-scroll__row").style.transform="translateY(0px)")}},{key:"translateImages",value:function(){var t=this.querySelector(".s-steps-scroll__images");0!=this.sectionTopValue&&(t.style.transform="translateY("+(this.sectionTopValue-window.scrollY)+"px)")}},{key:"switchSteps",value:function(){this.querySelectorAll(".s-steps-scroll__images__image"),Array.from(this.querySelectorAll(".s-steps-scroll__content__step")),this.sectionTopValue;0!=this.sectionTopValue&&(console.log(this.sectionTopValue),window.scrollY>=this.sectionTopValue+700)&&console.log("set active 2")}},{key:"scrollEvent",value:function(){var t=this;window.addEventListener("scroll",function(){return t.switchSteps(),t.toggleFixedSection(),t.translateImages()})}}]),r}())},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
