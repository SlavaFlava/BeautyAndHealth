"use strict";function _typeof(t){return(_typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}function _classCallCheck(t,e){if(!(t instanceof e))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,e){for(var r=0;r<e.length;r++){var n=e[r];n.enumerable=n.enumerable||!1,n.configurable=!0,"value"in n&&(n.writable=!0),Object.defineProperty(t,_toPropertyKey(n.key),n)}}function _createClass(t,e,r){return e&&_defineProperties(t.prototype,e),r&&_defineProperties(t,r),Object.defineProperty(t,"prototype",{writable:!1}),t}function _inherits(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(e&&e.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),Object.defineProperty(t,"prototype",{writable:!1}),e&&_setPrototypeOf(t,e)}function _createSuper(r){var n=_isNativeReflectConstruct();return function(){var t,e=_getPrototypeOf(r);return _possibleConstructorReturn(this,n?(t=_getPrototypeOf(this).constructor,Reflect.construct(e,arguments,t)):e.apply(this,arguments))}}function _possibleConstructorReturn(t,e){if(e&&("object"===_typeof(e)||"function"==typeof e))return e;if(void 0!==e)throw new TypeError("Derived constructors may only return object or undefined");return _assertThisInitialized(t)}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _wrapNativeSuper(t){var r="function"==typeof Map?new Map:void 0;return(_wrapNativeSuper=function(t){if(null===t||!_isNativeFunction(t))return t;if("function"!=typeof t)throw new TypeError("Super expression must either be null or a function");if(void 0!==r){if(r.has(t))return r.get(t);r.set(t,e)}function e(){return _construct(t,arguments,_getPrototypeOf(this).constructor)}return e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),_setPrototypeOf(e,t)})(t)}function _construct(t,e,r){return(_construct=_isNativeReflectConstruct()?Reflect.construct.bind():function(t,e,r){var n=[null];n.push.apply(n,e);e=new(Function.bind.apply(t,n));return r&&_setPrototypeOf(e,r.prototype),e}).apply(null,arguments)}function _isNativeReflectConstruct(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],function(){})),!0}catch(t){return!1}}function _isNativeFunction(t){return-1!==Function.toString.call(t).indexOf("[native code]")}function _setPrototypeOf(t,e){return(_setPrototypeOf=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(t,e){return t.__proto__=e,t})(t,e)}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _defineProperty(t,e,r){return(e=_toPropertyKey(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}function _toPropertyKey(t){t=_toPrimitive(t,"string");return"symbol"===_typeof(t)?t:String(t)}function _toPrimitive(t,e){if("object"!==_typeof(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0===r)return("string"===e?String:Number)(t);r=r.call(t,e||"default");if("object"!==_typeof(r))return r;throw new TypeError("@@toPrimitive must return a primitive value.")}!function n(o,i,s){function c(e,t){if(!i[e]){if(!o[e]){var r="function"==typeof require&&require;if(!t&&r)return r(e,!0);if(u)return u(e,!0);throw(t=new Error("Cannot find module '"+e+"'")).code="MODULE_NOT_FOUND",t}r=i[e]={exports:{}},o[e][0].call(r.exports,function(t){return c(o[e][1][t]||t)},r,r.exports,n,o,i,s)}return i[e].exports}for(var u="function"==typeof require&&require,t=0;t<s.length;t++)c(s[t]);return c}({1:[function(t,e,r){customElements.get("s-steps-scroll")||customElements.define("s-steps-scroll",function(){_inherits(r,_wrapNativeSuper(HTMLElement));var e=_createSuper(r);function r(){var t;return _classCallCheck(this,r),_defineProperty(_assertThisInitialized(t=e.call(this)),"activeImages",[1,2]),t}return _createClass(r,[{key:"connectedCallback",value:function(){this.scrollEvent()}},{key:"checkHeight",value:function(){var e=this,t=this.querySelectorAll(".s-steps-scroll__images__image"),r=Array.from(this.querySelectorAll(".s-steps-scroll__content__step"));t.forEach(function(t){t.getBoundingClientRect().y<Math.round(window.screen.availHeight/3)?e.activeImages.includes(t.getAttribute("data-image-index"))||(null!=r[t.getAttribute("data-image-index")-2]&&(r[t.getAttribute("data-image-index")-2].classList="s-steps-scroll__content__step s-steps-scroll__content__step--top"),null!=r[t.getAttribute("data-image-index")-1]&&(r[t.getAttribute("data-image-index")-1].classList="s-steps-scroll__content__step s-steps-scroll__content__step--active"),null!=r[t.getAttribute("data-image-index")]&&(r[t.getAttribute("data-image-index")].classList="s-steps-scroll__content__step s-steps-scroll__content__step--bottom"),e.activeImages.push(t.getAttribute("data-image-index"))):t.getBoundingClientRect().y>Math.round(window.screen.availHeight)+100&&e.activeImages.includes(t.getAttribute("data-image-index"))&&(null!=r[t.getAttribute("data-image-index")-3]&&(r[t.getAttribute("data-image-index")-3].classList="s-steps-scroll__content__step s-steps-scroll__content__step--top"),null!=r[t.getAttribute("data-image-index")-2]&&(r[t.getAttribute("data-image-index")-2].classList="s-steps-scroll__content__step s-steps-scroll__content__step--active"),null!=r[t.getAttribute("data-image-index")-1]&&(r[t.getAttribute("data-image-index")-1].classList="s-steps-scroll__content__step s-steps-scroll__content__step--bottom"),e.activeImages.pop())})}},{key:"scrollEvent",value:function(){var t=this;window.addEventListener("scroll",function(){return t.checkHeight()})}}]),r}())},{}]},{},[1]);
//# sourceMappingURL=data:application/json;charset=utf8;base64,
